echo "$ZDOTDIR"
emacs $ZDOTDIR/.zshenv
emacs ~/.zshenv
. .zshrc
rm #.zsh_functions#
rm -f #.zsh_functions#
ls | grep "z"
rm .zsh_aliases
source ~/$ZDOTDIR/.zshrc
emacs .zshrc
la
eacs .zsh_aliases
source .zshrc
emacs .zsh_aliases
ls | grep z
shebang='#!/bin/'${ending}
start='#!/bin/\
'
shebang=$start$ending
echo $start
ending=$(getShebangEnding $1)
echo ${ending}
echo "${ending}\
"
getFileType file.txt
getShebangEnding file.py
createShebang file.py
shebang=$(createShebang file.py)
rm file.sh~
git
git config --list --show-origin
fil=file.py
start='#!/bin/'
    ending=$(getShebangEnding $fil)
echo $ending
shebang="${start}${ending}"
shebang="${start}""${ending}"
shebang="$start$ending"
echo $shebang
ls | grep file
hg e
hg edit
where zssh
where /bin
where bin
where zsh
man ls
sudo
cd /usr/bin/python3 | ls
cd /usr/bin/python3
cd /usr/bin 
where python
where python3
..
cd /bin
sudo ln -s /usr/bin/python3 /bin/python3
man ln
sudo ln -s /usr/bin/python3 /bin
/usr/bin/python3
getShebang file.py
newScript file.py
emacs file.py
/.file.py
./file.py
rm file.py
newScript file.sh
emacs file.sh
./file.sh
rm file.sh
startEmacs file.txt
emacs
emacs --help
emacs -e "M-x server-start"
ls | grep emacs
emacs .emacs
emacs .emacs.d
gh
man rf
git config --list 
man git-config
editfuncs
git config --global core.editor emacs
git config --list
emacsdaemon
newScript install.sh
eval `dircolors ~/.dircolors`
dircolors
mv install.sh ~/.zsh
script_dir=$(dirname "$(readlink -f "$0")")
echo $dirname
echo $0
%1d
jobs
%~
pwd | tail
getcwd
cwd
dirname pwd
echo $(dirname "$(readlink -f "$0")")
man pwd
realpath
basename pwd
basename
foo=pwd
basename foo
foo=$(pwd)
echo $foo
basename $foo
echo $(find -maxdepth 1 -type f -name ".*")
echo ls | grep .
ls | grep .
basename $(pwd)
file=$(ls | grep .)
script_dir=$(basename $(pwd))
echo $file
man rm
~/.dircolors
emacs install.sh
emacs file.txt
for file in $(ls | grep .);do echo ${file[:-1]};done
for file in $(ls | grep .);do echo ${(@)file[-1]};done
for file in $(ls | grep .z);do echo ${(@)file[-1]};done
for file in $(ls | grep .);do echo ${file};done
for file in $(ls | grep .z);do echo ${file};done
for file in $(ls | grep ".z");do echo ${file};done
git add .zprofile
git add .zsh_functions
git add .zsh_aliases
git add .zshrc
echo $home
echo $HOME
ls | grep -E "~"
ls | grep -E "\~"
ls | grep -E "\.z"
grep -E "\.z"
emacs .zshenv
open .zshenv
open ./install.sh
open install.sh
man open
files=$(find $script_dir -depth 2 | grep -E "\.")
cd 
cd dotfiles | nano install.sh
set -a files=$(find . -depth 2 -name '.z*' | xargs basename)
files=$(find . -depth 2 -name '.z*' | xargs basename)
for file in $files;do echo ${file}1;done
for file in ${files[@]};do echo ${file}1;done
for file in ${(@)files};do echo ${file}1;done
for file in ${(@)files};do echo ${file[@]}1;done
for file in $files;do echo ${file:1};done
for file in $files;do echo ${file:1:3};done
for file in $files;do echo ${(@)file:1:3};done
for file in $files;do echo ${(@)file:1:5};done
files=$(find . -depth 2 -name '.z*')
files=$(find -maxdepth 1 -type f -name ".*")
files=$(find -maxdepth 1 -name ".*")
files=$(find . -maxdepth 1 -type f -name ".*")
echo ${#files[@]}
files=$(find . -maxdepth 1 -type f -name ".z*")
files=$(find . -maxdepth 2 -type f -name ".z*")
for file in $files;do echo ${#file};done
for file in $files;do echo ${file};done
for file in $files;do echo $(basename $file);done
files=$(find . -maxdepth 2 -type f -name ".*")
echo $files
echo ${files[@]}
echo ${files[@]:1}
echo ${files[@]:1:3}
awk
files=$(find . -maxdepth 2 -type f -name ".*") | awk awk '{ print $NR }'
files=$(find . -maxdepth 2 -type f -name ".*") | awk '{ print $NR }'
find . -maxdepth 2 -type f -name ".*" | awk '{ print $NR }'
find . -depth 2 -name '.z*' | xargs basename | awk '{print $0}'
find . -depth 2 -name '.z*' | xargs basename | awk '{print $1}'
find . -depth 2 -name '.z*' | xargs basename | awk '{print $2}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { OFS = ";"; ORS = "\n\n" }\
>            { print $1, $2 }
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { OFS = ";"} {print $0} '
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { OFS = "."} {print $0}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { OFS = "."} {print $1}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { OFS = "."} {print $2}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { RS = "."} {print $2}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { RS = "."} {print $0}'
find . -depth 2 -name '.z*' | xargs basename | awk 'BEGIN { RS = "."} {print $1}'
find . -depth 2 -name '.z*' | xargs basename -print0
find . -depth 2 -name '.z*' | xargs basename -p
find . -depth 2 -name '.z*' | xargs -p  basename
find . -depth 2 -name '.z*' | xargs -0  basename
find . -depth 2 -name '.z*' | xargs -0p  basename
find . -depth 2 -name -print0 '.z*' | xargs -0p  basename
find . -depth 2 -name '.z*' -print0  | xargs -0p  basename
find . -depth 2 -name '.z*' -print0  | xargs -op  basename
find . -depth 2 -name '.z*' -print0  | xargs -Ip basename
find . -depth 2 -name '.z*' -print0  | xargs -Ep basename
set -a files
$files=(find . -depth 2 -name '.z*' | xargs -Ep basename)
files=(find . -depth 2 -name '.z*' | xargs -Ep basename)
find . -depth 2 -name '.z*' | xargs -Ep basename
f=$(find . -depth 2 -name '.z*' | xargs -Ep basename)
echo ${f[@]1}
f=$(find . -depth 2 -name '.z*'-print0 | xargs -0 basename)
echo ${f}
f=$(find . -depth 2 -name '.z*'-print0 | xargs -0p basename)
find . -depth 2 -name '.z*'-print0 | xargs -0p basename
find . -depth 2 -name '.*'-print0 | xargs -0p basename
find . -depth 2 -name '.*'-print0
find . -depth 2 -name '.*' 
find . -depth 2 -name '.*' -print0
find . -depth 2 -name '.*' -print0 | xargs -0p basename
f=$(find / \! -name "*.c" -print)
f=$(find / \! -name "*.c")
find / -newerct '1 minute ago' -print
man exec
find . -type f -exec echo {} \;
f=(find . -type f -exec echo {} \;)
f=$(find . -type f -exec echo {} \;)
echo $f
echo ${f[@]}
echo ${f[@]:1}
echo ${f[@]:1:2}
for file in $(find . -type f -exec echo {} \;); do echo ${file}1;done
for file in $(find . -depth 2 -name '.z*' | xargs basename); do echo ${file}1;done
typeset -A aa\
typeset "aa[one\"two\"three\"quotes]"=QQQ\
print "$aa[one\"two\"three\"quotes]"
cd .zshenv
script_dir=$(pwd)
echo $script_dir
ls -A
cd .zsh_functions
nano .zshenv
source ~/.zshenv
k
find . -depth 2 -name '.z*' | xargs basename
find . -depth 2 -name '.z*'
nano ./.zsh/.zsh_aliases
echo $ef
ef=$(find . -depth 2 -name '.z*' | xargs echo basename)
echo ${ef[1]}
ef=$(find . -depth 2 -name '.z*' | xargs basename echo)
ef=$(find . -depth 2 -name '.z*' | xargs basename echo {})
man xargs
ef=$(find . -depth 2 -name '.z*' | xargs basename | xargs echo)
echo ${ef}
echo ${ef[@]}
echo ${ef[@]:1}
ef=$(find . -depth 2 -name '.z*' |  xargs echo)
echo ${ef[@]:2}
echo ${ef[@]:1:2}
find . -f path
find
man find
find . -type d
find . -type d depth 1
find . -type d -depth 1
dirname ./.zsh
dirname
man dirname
getdir
readlink ./.zsh
nano -h
nano ~/.nanorc
find $(pwd)  -type d -depth 1
e=$(find $(pwd)  -type d -depth 1)
echo $e
script_dir=$(find $(pwd)  -type d -depth 1)
cd ~
ls 
ls -a | grep ".z"
nano .zsh_functions
nano .zsh_aliases
nano install.sh
nano ~/.zshrc
source ~/.zshrc
caf
kill %1
git init
git add .zsh
brew remove macvim
cddot
emacs .zsh_exports
ls -a
open .zsh
hg
history
nano
finder
echo $PATH
/.install.sh
ls | .zsh
ls | grep .zsh
rm .zsh_aliases~
rm .zsh_exports~
rm .zsh_functions~
rm .zshenv~
rm .zshrc~
clear
shellupdate
eval "$(homebrew/bin/brew shellenv)"\
brew update --force --quiet
eval "$(homebrew/bin/brew shellenv)"
cd opt
open .zsh_exports
eval $(/opt/homebrew/opt shellenv)
cd /opt/homebrew/opt
cd /opt/homebrew
cd bin
pwd
export PATH="/opt/homebrew/bin:${PATH}"
brew list
ccdot
./install.sh
~
brew
e="hist_expire_dups_first"
echo ${(U)e}
read n | echo ${(u)e}
read n | echo ${(U)n}
cd .zsh_history
cd dotfiles
cd .zsh
touch .zsh_sessions
rm -rf .zsh_sessions
mkdir .zsh_sessions
editzshenv
editzshrc
cd .zsh_sessions
ls
cd .zsh
echo 
echo "export SHELL_SESSIONS_DISABLE=1" >> .zsh_exports
cat .zsh_exports
emacs .zsh_exports
/.install.sh
cddot
/.install.sh
./install.sh
editzshenv
editzshrc
caf
editzshrc
gh auth setup-git
ghlogin
cddot
ls
git init
git add .zsh
git add .gitignore
git add install.sh
git commit -m "initial commit"
gh repo create dotfiles --public --soruce=. --remote=upstream --push
ghlogin
gh repo create dotfiles --public --source=. --remote=upstream --push
git push
echo "zsh/.DS_Store" >> .gitignore
touch README.md
emacs README.md
kill %1
hg
cddot
emacs .gitignore
rm -rf .git
cd .zsh
emacs .zprofile
emacs README.md
cddot
emacs README.md
ls
git init
git add .zsh
git add install.sh
git add .gitignore
git add README.md
hg commit
hg
git commit -m "initial commit"
ghlogin
hg
hg git
hg gh
history
gh repo create dotfiles --public --source=. --remote=upstream --push
cd .zsh
emacs .zprofile
python3 -c "print('wow')"
cddot
emacs .zprofile
cd .zsh
nano .zprofile
open .zprofile
e
ls
ls
ls
ls
man
cd dotfiles
nano
nano install.sh
script_dir=$(find $(pwd) -type d -depth 1)
echo $script_dir
stat /Users/earlchase/dotfiles/.git
nano install.sh
cd .zsh
clear
ls
ls -a
cd ..
nano install.sh
cd ~
ls -A | grep ".zsh"
ls -A | grep ".zsh" | xargs -n 1 rm
ls -A | grep ".zsh"
cd dotfiles
nano install.sh
./install.sh
cd .zsh
ls
ls -a
cd ~
ls -A | grep ".zsh"
cd dotfiles
nano install.sh
nano instal12.sh
rm -rf install2.sh
clear
ls
chmod 755 install2.sh
./install2.sh
nano instal12.sh
cd ~
ls -a | grep ".zsh"
echo $(find . -depth 2 -name '.z*)
echo $(find . -depth 2 -name '.z*')
cd dotfiles
echo $(find . -depth 2 -name '.z*')
echo $(find . -depth 2)
find
man find
echo $(find . -depth 2 -path '.z*')
echo $(find . -depth 1 -path '.z*')
echo $(find . -depth 2 -name '.z*')
echo $(find . -depth 2 -name '.z*'| xargs dirname)
pwd
cd .zsh
pwd
find . -mindepth 1 -maxdepth 1 -print0
cd ..
find . -mindepth 1 -maxdepth 1 -print0
nano install.sh
script_dir=$(find $(pwd) -type d -depth 1)
echo $script_dir
nano install.sh
script_dir=$(find $(pwd) -type d -depth 1 -name '.z*')
echo $script_dir
script_dir=$(find $(pwd) -type d -depth 1 -name '.zsh')
echo $script_dir
echo $(find . -depth 2 -name '.z*'| xargs dirname)
echo $(find . -depth 2 -name '.z*'| xargs basename)
echo $(find . -depth 2 -name '.zsh'| xargs basename)
echo $(find . -depth 2 -name '.zsh*'| xargs basename)
seq 2 | xargs --replace -n1 echo a-{}-b
echo $(find . -depth 2 -name '.zsh*'| xargs basename)
echo $(find $(pwd) -type d -depth 1 -name '.zsh')
nano install.sh
./install2.sh
ln
ls
./install.sh
brew
cddot
git add .zsh
git -am "Clarified the roll of each .zsh file"
git commit -am "Clarified the roll of each .zsh file"
git push
nano install.sh
./install.sh
brew
cddot
git commit -am "Cleaned up install.sh"
git push
fsearch git
cddot
cd .zsh
ls
~
ls
git config --list
caf
cddot
cd .zsh
ls
emacs .zsh_exports
editzshrc
autoload -Uz promptinit\
promptinit
autoload
emacs .zsh_exports
cddot
gcc "Small fixes"
git push
python3
python3
python3
cd documents
cd ccp
ls
emacs twopointersoneinput.py
caf
cddot
git rebase -i Head~n
git rebase -i HEAD~n
git rebase -i
git rebase -i HEAD~3
git rebase -i HEAD~4
git push --force
ls
emacs README.md
gcc "Fixed the period"
git push
kill %1
cd documents
cd ccp
emacs backtracking.py
jobs
caf
ls
emacs twopointersoneinput.py
echo "$ZDOTDIR"
jobs
kill %1
caf
kill %1
cd documents
cd ccp
emacs twopointersoneinput.py
caf
python3
kill %1
emacs
cd documents/ccp
emacs slidingwindow.py
caf
kill %1
TRUE
echo TRUE
where true
true
echo $(seq 4)
echo
man echo
echo $(seq 4) | awk '{print $1}'
editzshoptions
echo $HISTSIZE
cddot
gcc "Moved prompt into a seperate file"
git push
open https://github.com/VictorHugoPilled/dotfiles.git
git add .zsh
gcc "Added .zsh_prompt file"
nano
nano .gitignore
nano .gitignore
git reset
nano .gitignore
git reset
git reset -- .zsh/#.zsh_exports#
gcc "Added .zsh_prompt file"
git push
nano .gitignore
cd .zsg
cd .zsh
editzshoptions
ls
editzshexports
ls
emacs .zsh_prompt
shellupdate
s
cddot
git rm #.zsh_exports#
git rm .zsh/#.zsh_exports#
cd .zsh
ls
cddot
gcc "Fixed errors"
git push
cddot
nano .gitignore
gcc "Removed a period"
git push
functions -u
functions
zmodload
zutil
editfuncs
print $(( rand48(seed) ))
print $(( f = sin(0.3) ))
autoload zsh/mathfunc
print $(( f = sin(0.3) ))
zmodload zsh/mathfunc
print $(( f = sin(0.3) ))
zformat -f REPLY "The answer is '%3(c.yes.no)'." c:3
strftime
zmodload zsh/datetimw
zmodload zsh/datetime
strftime
zmodload zsh/calendar
zmodload zsh/datetime
calendar
zmodload zsh/zcalc
caf
python3
quit()\

printenv
man comm
python3
a=5
if (( a % 3 == 0 ));then echo $a;done\
\
\
\
\

if (( a % 3 == 0 ));then echo $a;done;fi\
\
\
\
\

editfuncs
a=3
a=3
e=$(( a%3 ))
echo $a
e=$(( a/3 ))
echo $a
echo $e
e=$(( a%3 ))
echo $e
if $(( a%3 ));then echo $a; done\
fi
if $(( a%3 ));then echo $a; done;fi\

if $(( a%3 )); then echo $a; done;fi\

if $(( a%3 )); then echo $a;fi\

if $(( a%3 )); then echo $a;fi\

if $(( a%3 == 0 )); then echo $a;fi\

a=3
if $(( a%3 == 0 )); then echo $a;fi\

a=10\
\
#\
if (( a %  3 ==  0 )); then\
 echo "The number $a is divisible by  3."\
else\
 echo "The number $a is not divisible by  3."\
fi
a=10\
\
#\
if (( a %  3 ==  0 )) || (( a % 5 == 0 )); then\
 echo "The number $a is divisible by  3."\
else\
 echo "The number $a is not divisible by  3."\
fi
python3
caf
python3
python3
echo $(( 6 % 3 ))
python3
caf
python3
jobs
python3
python3
python3
wget https://gist.githubusercontent.com/alig/0ef2bfaa3edf0aa2f004/raw/3cf9f111afb93fe884dbea14e5c98dd014a52f6b/gistfile1.txt
curl https://gist.githubusercontent.com/alig/0ef2bfaa3edf0aa2f004/raw/3cf9f111afb93fe884dbea14e5c98dd014a52f6b/gistfile1.txt
curl https://gist.github.com/alig/0ef2bfaa3edf0aa2f004
wget https://gist.github.com/alig/0ef2bfaa3edf0aa2f004
ls
man ks
man ls
mkd optics
python3
touch sample.optic
nano sample.optic
python3
echo $path
dir=( ${(u)^path:A}(N-/) )'
dir=( ${(u)^path:A}(N-/) )
echo $dir
cddot
cd .zsh
ls
emacs .zprofile
emacs .zshrc
emacs .zshrc
emacs .zprofile
emacs .zsh_exports
echo $path
emacs .zshrc
emacs .zsh_aliases
echo $path
cat .zsh_exports
typeset -T array=(value value2):
scalar="default_value"
array=("value1" "value2" "value3")
sep=":"
typeset -T "scalar=$scalar array=${array[*]} $sep"
caf
cd optics
ls
rm -rf sample.optic
emacs gnu.optic
clear
gh gist create gnu.optic -d "Optic to search gnu manuals"
gh auth refresh -h github.com -s gist
~
emacs gtoken.txt
emacs gtoken.txt
gh auth refresh -h github.com -s gist
cd optics
gh auth refresh -h github.com -s gist
gh gist create gnu.optic -d "Optic to search gnu manuals"
caf
python3
emacs gnu.optic
gh create -p -w gnu.optic -d "Optic to search gnu manuals"
gh gist create -p -w gnu.optic -d "Optic to search gnu manuals"
/Applications/Firefox.app/Contents/MacOS/firefox
editalias
editaliases
cddot
gcc "Updated aliases"
git push
editzshexports
shellupdate
gcc "Fixed browser ENV variable"
git push
curl https://gist.githubusercontent.com/VictorHugoPilled/604ed2e04ea2c388f08825f74c953c88/raw/7c3541ed716f36d1260ede08ea5919cbf494b725/gnu.optic
git gist
gh gist
gh gist delete gnu.optic
~
cd optics
emacs gnu.optic
emacs gnu.optic
newgist gnu.optic -d "Optic to search gnu manuals"
gh
gh --help environment
cd optics
emacs gnu.optic
ca
caf
python3
jobs
kill %1
python3
lsof -t -i :3000
lsof -t -i
lsof -t -i :641
ls -ld -- *(%W)
ls -ld -- *(-@)
arr=(veldt jynx grimps waqf zho buck)
print ${arr//(#m)[aeiou]/${(U)MATCH}}
cddot
ls
~
ls
cddot
gcc "Fixed install.sh for codespaces"
git push
ls
cd .zsh
pwd
~
pwd
man cp
cp /Users/earlchase/.emacs.d /Users/earlchase/dotfiles/.zsh
cp /Users/earlchase/.emacs.d/ /Users/earlchase/dotfiles/.zsh
cp -R /Users/earlchase/.emacs.d /Users/earlchase/dotfiles/.zsh
cddot
cd .zsh
ls
cd .emacs.d
ls
~
cddot
cat install.sh
echo $(find . -maxdepth 2 -path './.zsh/*' \! -name '.DS_Store' | xargs -n 1 basename)
./install.sh
cddot
emacs install.sh
git add .zsh/.emacs.d/
gcc "Added emacs config"
ls
emacs .gitignore
emacs .gitignore
emacs .gitignore
git reset -- .zsh/.emac.d
git add .zsh/.emac.d
git reset -- .zsh/.emac.d/
git reset
git status
git push
gcc "Updated .gitignore"
git push
jobs
caf
git status
emacs .gitignore
gcc "Updated .gitignore"
gp
pwd
echo $(pwd)/.zsh
echo $(pwd)/.zsh/.emac.d
echo $(pwd)/.zsh/.emac.d/config.org
echo $(pwd)/.zsh/.emac.d/config.org~
git rm -f /Users/earlchase/dotfiles/.zsh/.emac.d/config.org~
git rm -f .zsh/.emac.d/config.org~
hg "rm"
git ls-files -z
git rm .zsh/.emacs.d/auto-save-list/.saves-46030-Earls-MBP.lan~
git ls-files -z
git rm .zsh/.emacs.d/config.org~
git rm .zsh/.emacs.d/elpa/gnupg
git rm -r .zsh/.emacs.d/elpa/gnupg
git ls-files -z
git rm -r .zsh/.emacs.d/elp
git rm -r .zsh/.emacs.d/elpa
git ls-files -z
git rm .zsh/.emacs.d/init.el~
git ls-files -z
git rm .emacs.d/tutorial/English.tut
git rm .zsh/.emacs.d/tutorial/English.tut
git rm .zsh/.emacs.d/url/cookies
git rm .zsh/.emacs.d/url/cookies~
git status
emacs .gitignore
git add -A
git push
git commit -a
git commit -a
gp
gcc "Updated .gitignore"
cd .zsh
cd .emacs.d
ls
jobs
editfuncs
cddot
emacs install.sh
cd .zsh
cd .emacs.d
ls
..
..
emacs install.sh
echo './.zsh/*'
$1=e
e="zs"
echo "./.${e}/*"
echo "./.${1}/*"
emacs install.sh
editfuncs
function makeE() {\
 echo "./.${1}/*" \
}
makeE zsh
emacs install.sh
./install.sh
gcc "Made install process conditional on the system"
git push
finder
emacs install.sh
emacs install.sh
cddot
cd dotfiles
./install.sh
