#+auto_tangle: t
* emacs housekeeping
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setopt warning-minimum-level :emergency)
  (setopt inhibit-startup-message t)

  (setopt create-lockfiles nil)
  ;; don't ask for confirmation when opening symlinked file
  (setopt vc-follow-symlinks t)     
#+end_src

* force buffer menu to always open in other window
#+name: force-buffer-menu
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'buffer-menu-other-window)
#+end_src


* custom function to quickly kill emacs
#+begin_src emacs-lisp
  (defun my-kill-emacs ()
  "save some buffers, then exit unconditionally"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))
  ;; create a keymap with new function
  (global-set-key (kbd "C-x C-c") 'my-kill-emacs)
#+end_src


* setup use-package
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t)
;; necessary to get packages to install on mac
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
(use-package use-package-ensure-system-package :ensure t)
#+end_src


* setup package sources
#+begin_src emacs-lisp
(use-package package
  :custom
  (package-enable-at-startup nil)
	  (package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")))  				     )

#+end_src

* setup autotangle mode
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
       )
#+end_src


* language specific modes
** rust mode
#+begin_src emacs-lisp
;; only load rust-mode when needed
(use-package rust-mode
  :mode "\\.rs\\'"
)
#+end_src

** javascript mode
#+begin_src emacs-lisp
(use-package js-mode
  :mode ( "\\.js\\'" "\\.mjs\\'")
)
#+end_src

** html mode
#+begin_src emacs-lisp
(use-package web-mode

  :mode ("\\.html?\\'" "\\.tsx\\'" "\\.jsx\\'")
  :custom (web-mode-enable current-element-highlight t)
)
#+end_src

** typescript mode
#+begin_src emacs-lisp
(use-package typescript-mode
:mode "\\.ts\\'")
#+end_src

** setup linting for javascript
#+begin_src emacs-lisp
(use-package flycheck
:hook (typescript-mode js-mode web-mode-enable)
:custom (flycheck-add-mode 'javascript-eslint 'web-mode)
)
#+end_src

* initial frame size
#+begin_src emacs-lisp
(use-package frame
  :custom
  (initial-frame-alist
       '((top . 1) (left . 1) (width . 200) (height . 60)))
 )
#+end_src

* spray-mode for reading
#+begin_src emacs-lisp
(use-package spray
  :bind ("C-<f6>" . spray-mode)
  :mode ("\\.epub\\'" "\\.txt\\'")
  :custom ((spray-margin-left 80)
	   (spray-margin-top 5)
	   (set-frame-font "Iosevka Extended 12" nil t)
	   )
  )
#+end_src

* org mode setting
** setup org mode with use package
#+begin_src emacs-lisp
;; autosave on TODO state chan ge
(use-package org
  :hook ((org-trigger . save-buffer)
	 (org-mode . flyspell-mode)
	 )
  :custom
  (org-todo-keywords
   '((sequence "TODO(t!)" "WAIT(w@/!)" "|" "DONE(d@!)" "CANCELED(c@)")))
  (org-treat-insert-todo-heading-as-state-change t "log TODO creation")
  (org-log-into-drawer "LOGBOOK" "log into LOGBOOK drawer")
  (add-to-list 'org-modules "org-habit" "add habits to org-modules")
  (org-log-done 'note)
  )
#+end_src

** customize org-attach
#+begin_src emacs-lisp
(use-package org-attach
:custom (org-attach-method 'l "set symbolic link as a default attachment method")
 )
#+end_src

** setup org-pomodoro
#+begin_src emacs-lisp
;; org-pomodoro
(use-package org-pomodoro
  :ensure t
  :commands (org-pomodoro)
  :bind ("M-C-o" . org-pomodoro)
  ;; autosave on pomodorro finish
  :hook ((org-pomodoro-finished . save-buffer)
         (org-pomodoro-started . save-buffer)
	 (org-pomodoro-break-finished . save-buffer)
	 )
  :custom
   (org-pomodoro-length 20)
   (org-pomodoro-short-break-length 5)
   (org-pomodoro-clock-break t)
   (org-pomodoro-long-break-length 15)
   (org-pomodoro-manual-break t)
   )

#+end_src   

* customize dired
#+begin_src emacs-lisp
(use-package dired
  :hook (dired-mode . (lambda ()
            (define-key dired-mode-map
              (kbd "C-c C-x a")
              #'org-attach-dired-to-subtree)))
  :custom ((dired-kill-when-opening-new-dired-buffer t))	     
 )
#+end_src

* set up magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-c C-g" . magit-status)
        ("C-c p" . magit-push-to-remote)
	 )
 )
#+end_src

* prevent custom edit from adding settings to init.el
#+begin_src emacs-lisp
(use-package cus-edit
  :custom
  (custom-file null-device "Don't store customizations"))
			 
#+end_src
